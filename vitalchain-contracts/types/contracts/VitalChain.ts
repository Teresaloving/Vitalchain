/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VitalChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "encryptedCountOf"
      | "logVitalRecord"
      | "myEncryptedCount"
      | "myEncryptedLastVolume"
      | "protocolId"
      | "publicCount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VitalRecordLogged"): EventFragment;

  encodeFunctionData(
    functionFragment: "encryptedCountOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logVitalRecord",
    values: [
      BytesLike,
      BytesLike,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "myEncryptedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myEncryptedLastVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "encryptedCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logVitalRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myEncryptedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myEncryptedLastVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicCount",
    data: BytesLike
  ): Result;
}

export namespace VitalRecordLoggedEvent {
  export type InputTuple = [
    user: AddressLike,
    ipfsCid: string,
    date: BigNumberish,
    locationHash: BytesLike,
    hospitalHash: BytesLike,
    donationCategory: BigNumberish,
    transparentVolume: BigNumberish,
    encVolume: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    ipfsCid: string,
    date: bigint,
    locationHash: string,
    hospitalHash: string,
    donationCategory: bigint,
    transparentVolume: bigint,
    encVolume: string
  ];
  export interface OutputObject {
    user: string;
    ipfsCid: string;
    date: bigint;
    locationHash: string;
    hospitalHash: string;
    donationCategory: bigint;
    transparentVolume: bigint;
    encVolume: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VitalChain extends BaseContract {
  connect(runner?: ContractRunner | null): VitalChain;
  waitForDeployment(): Promise<this>;

  interface: VitalChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  encryptedCountOf: TypedContractMethod<[user: AddressLike], [string], "view">;

  logVitalRecord: TypedContractMethod<
    [
      inputVolume: BytesLike,
      inputProof: BytesLike,
      ipfsCid: string,
      date: BigNumberish,
      locationHash: BytesLike,
      hospitalHash: BytesLike,
      donationCategory: BigNumberish,
      transparentVolume: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  myEncryptedCount: TypedContractMethod<[], [string], "view">;

  myEncryptedLastVolume: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  publicCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "encryptedCountOf"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "logVitalRecord"
  ): TypedContractMethod<
    [
      inputVolume: BytesLike,
      inputProof: BytesLike,
      ipfsCid: string,
      date: BigNumberish,
      locationHash: BytesLike,
      hospitalHash: BytesLike,
      donationCategory: BigNumberish,
      transparentVolume: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "myEncryptedCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "myEncryptedLastVolume"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getEvent(
    key: "VitalRecordLogged"
  ): TypedContractEvent<
    VitalRecordLoggedEvent.InputTuple,
    VitalRecordLoggedEvent.OutputTuple,
    VitalRecordLoggedEvent.OutputObject
  >;

  filters: {
    "VitalRecordLogged(address,string,uint64,bytes32,bytes32,uint8,uint32,bytes32)": TypedContractEvent<
      VitalRecordLoggedEvent.InputTuple,
      VitalRecordLoggedEvent.OutputTuple,
      VitalRecordLoggedEvent.OutputObject
    >;
    VitalRecordLogged: TypedContractEvent<
      VitalRecordLoggedEvent.InputTuple,
      VitalRecordLoggedEvent.OutputTuple,
      VitalRecordLoggedEvent.OutputObject
    >;
  };
}
